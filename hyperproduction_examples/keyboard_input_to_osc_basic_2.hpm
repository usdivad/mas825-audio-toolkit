{"id":"846bd1b6-3c88-446f-8d56-bffc16fda2b9","nodes":{"7b52de94-8a86-41e2-b08f-ba30110ba0bd":{"nodetype":"KeyboardInput","descr":"Listen to input from computer keyboard.","x":40,"y":240,"id":"7b52de94-8a86-41e2-b08f-ba30110ba0bd","inputs":{},"outputs":{"keyChar":{"id":"7babf323-1b76-4d58-b3e3-9d6a60c14a45","value":"[","type":"STRING","editor":false,"fixed":false},"keyCode":{"id":"21f9c33b-b0dc-4824-abea-24ebd516f589","value":91,"type":"INT","editor":false,"fixed":false},"isKeyDown":{"id":"a9f0430a-1585-47d1-ac7e-27e8f5a5ff60","value":false,"type":"BOOL","editor":false,"fixed":false}},"nodeName":""},"2970d9aa-9196-4587-aa87-ce31ba18decc":{"nodetype":"ConsoleLogger","descr":"This will log the value which is sent to it","x":1120,"y":400,"id":"2970d9aa-9196-4587-aa87-ce31ba18decc","inputs":{"logInput":{"id":"4b41ee6b-996c-4425-9804-8c040b39e6bd","value":{"address":"/addr1","args":0.333},"type":"ANY","fixed":false,"published":false,"editor":false,"continuous":true}},"outputs":{"passthruOutput":{"id":"e27c7569-a104-4df1-a880-18242cbd24b1","value":{"address":"/addr1","args":0.333},"type":"ANY","editor":false,"fixed":false}},"nodeName":""},"66b9e7e4-90bc-4472-a89a-3a731a1628c0":{"nodetype":"UDPTransceiver","descr":"Receives and sends UDP datagrams","x":1160,"y":200,"id":"66b9e7e4-90bc-4472-a89a-3a731a1628c0","inputs":{"bufIn":{"id":"28ce8e1f-8772-434a-82a3-623ab6f08e56","value":{"type":"Buffer","data":[47,97,100,100,114,49,0,0,44,102,0,0,62,170,126,250]},"type":"BUF","fixed":false,"published":false,"editor":false,"continuous":true},"oscIn":{"id":"37489358-a275-4185-b943-57e1b8feba16","value":{},"type":"OBJECT","fixed":false,"published":false,"editor":false,"continuous":true},"multiSend":{"id":"d23cd3bd-8fd5-4daf-a771-8d7deff4f1d6","value":0,"type":"MUX","fixed":false,"published":false,"editor":false},"sendHost":{"id":"4af1f386-6a93-43a1-8cfb-76703c4fe510","value":"127.0.0.1","type":"STRING","fixed":false,"published":false,"editor":false},"sendPort":{"id":"810de3d6-802b-4e84-af8d-01fc026403a1","value":4663,"type":"INT","fixed":false,"published":false,"editor":false},"listenPort":{"id":"753ddb5b-e177-4e1a-b719-4f64fcf9ce7e","value":9001,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"bufOut":{"id":"14fb3af1-4c40-4144-b4de-79823c3ebfb2","value":0,"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"6a235cc6-9d34-46b3-82ec-2d874f149066","value":null,"type":"OBJECT","editor":false,"fixed":false},"pktTime":{"id":"f566d3f6-8e52-4397-aadb-71687beb14cf","value":0,"type":"FLOAT","editor":false,"fixed":false}},"nodeName":""},"96694e8a-d382-47a5-a8bd-10184b4de9c2":{"nodetype":"OSCMessage-custom","x":960,"y":280,"id":"96694e8a-d382-47a5-a8bd-10184b4de9c2","inputs":{"bufIn":{"id":"84567418-ec4b-4468-aa36-01703238ead7","type":"BUF","fixed":false,"published":false,"editor":false},"_addr1":{"id":"2519ed75-ce02-4196-bd6e-2f80f4fc7e52","value":0.333,"type":"ANY","fixed":false,"published":false,"editor":false,"continuous":true}},"outputs":{"bufOut":{"id":"ba6e809a-12f0-4149-97c2-89c9341ef1f2","value":{"type":"Buffer","data":[47,97,100,100,114,49,0,0,44,102,0,0,62,170,126,250]},"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"6acef553-4398-48a7-93ba-444219a7e116","value":{"address":"/addr1","args":0.333},"type":"OBJECT","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports, state, id, triggerPort) {\n    //called on new input\n    var msg;\n    if (triggerPort.name === \"bufIn\") {\n      msg = osc.fromBuffer(ports.bufIn.get());\n      if (msg) {\n        var translated = msg.address.replace(/\\//g,'_');\n        if (ports.hasOwnProperty(translated)) {\n          ports[translated].set(msg.args);\n        }\n      }\n    } else {\n      var ip = triggerPort.get();\n      var values;\n      // Is the intention here to be able to send an array (or object) of arguments? If so, and this works, we don't need OSCArrayMessage.\n      if (ip != null && typeof ip == 'object') {\n        values = [];\n        for (var k in ip) {\n          values.push(ip[k]);\n        }\n      }\n      msg = {\n        address: \"\" + triggerPort.name.replace(/_/g, '/'),\n        args: (values) ? values : ip\n      };\n      ports.bufOut.set(osc.toBuffer(msg));\n      ports.oscOut.set(msg);\n    }\n  }"},"c6d122b2-dcb3-4cb5-9b85-b94cae0e6277":{"nodetype":"KeyCodeToNumValue-custom","x":440,"y":280,"id":"c6d122b2-dcb3-4cb5-9b85-b94cae0e6277","inputs":{"keyCode":{"id":"859bafc8-c374-44f0-a557-b5d9b5655219","value":91,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"numValue":{"id":"cdffcea6-d630-4d32-9744-183845dce7b1","value":0.333,"type":"NUM","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports) {\n      // ========\n      // Map characters to numbers (using characters here for readability)\n      // TODO: Put this somewhere else e.g. initfn?\n\n      // ----\n      // USERS: CHANGE THIS MAPPING HERE\n      // In this default example we're mapping to MIDI note pitches,\n      // much like you'd see in a \"musical typing\" feature in a DAW\n      var keyCharMappings = {\n        \"0\": 0,\n        \"1\": 0.111,\n        \"2\": 0.222,\n        \"3\": 0.333,\n        \"4\": 0.444,\n        \"5\": 0.555,\n        \"6\": 0.666,\n        \"7\": 0.777,\n        \"8\": 0.888,\n        \"9\": 1\n      };\n      // ----\n\n      // TODO: More examples.\n\n\n      // ========\n      // Set default value\n      var outputValue = -1;\n\n      // ========\n      // Get key code from input\n      var inputKeyCode = ports.keyCode.get();\n      console.log(\"inputKeyCode = \" + inputKeyCode);\n      // for (var input in this.inputs) {\n      //   product *= ports[input].get();\n      // }\n\n      // ========\n      // Convert mapping to use key codes\n      // TODO: Use a library or something for this; currently uses a lookup object from this gist https://gist.github.com/codingcarpenter/a4faf6a804123bb3a5ea\n      var keyCharsToKeyCodes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,leftarrow:37,uparrow:38,rightarrow:39,downarrow:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};\n      var keyCodeMappings = {};\n\n      for (var keyChar in keyCharMappings) {\n        // keyCodeMappings[keyChar.charCodeAt(0)] = keyCharMappings[keyChar];\n        if (keyCharsToKeyCodes.hasOwnProperty(keyChar)) {\n          keyCode = keyCharsToKeyCodes[keyChar];\n          keyCodeMappings[keyCode] = keyCharMappings[keyChar];\n        }\n      };\n\n\n      // =========\n      // Set & send value for input key code, if found\n      if (keyCodeMappings.hasOwnProperty(inputKeyCode)) {\n        outputValue = keyCodeMappings[inputKeyCode];\n        console.log(\"outputValue = \" + outputValue);\n\n        ports.numValue.set(outputValue);\n      }\n      else {\n        // console.log(\"keyCode \" + inputKeyCode + \" was not found in \");\n        // console.log(keyCodeMappings);\n      }\n\n    }"}},"connections":{"ae088b64-da77-4b09-bc84-f6f93d96d903":{"o":"ba6e809a-12f0-4149-97c2-89c9341ef1f2","i":"28ce8e1f-8772-434a-82a3-623ab6f08e56"},"0290f351-4195-43ea-808f-8b844f50cb84":{"o":"6acef553-4398-48a7-93ba-444219a7e116","i":"4b41ee6b-996c-4425-9804-8c040b39e6bd"},"bf70cb2b-5615-4131-8db3-2487d44c8c6d":{"o":"21f9c33b-b0dc-4824-abea-24ebd516f589","i":"859bafc8-c374-44f0-a557-b5d9b5655219"},"4eaabf69-7f51-4ea9-9a77-819663338b78":{"o":"cdffcea6-d630-4d32-9744-183845dce7b1","i":"2519ed75-ce02-4196-bd6e-2f80f4fc7e52"}},"inputs":{},"outputs":{},"nodetype":"ContainerMapNode","nodeName":"","descr":"A container for a sub mapping.","x":0,"y":0}