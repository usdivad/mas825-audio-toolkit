{"id":"14cc5120-d44a-47c0-a5d6-c9b776537003","nodes":{"4f663c4b-6aba-4c9d-abb2-b964f5bc6bcf":{"nodetype":"KeyboardInput","descr":"Listen to input from computer keyboard.","x":40,"y":240,"id":"4f663c4b-6aba-4c9d-abb2-b964f5bc6bcf","inputs":{},"outputs":{"keyChar":{"id":"9b6c827f-fe21-44b8-80d4-283bf6180427","value":"7","type":"STRING","editor":false,"fixed":false},"keyCode":{"id":"002617c0-1f22-4672-9fe1-619f57d2b484","value":55,"type":"INT","editor":false,"fixed":false},"isKeyDown":{"id":"805f81d4-ffbb-407a-9038-aa503cff83ad","value":false,"type":"BOOL","editor":false,"fixed":false}},"nodeName":""},"e2668aca-b74b-40bf-ab5b-3528a179c743":{"nodetype":"ConsoleLogger","descr":"This will log the value which is sent to it","x":800,"y":400,"id":"e2668aca-b74b-40bf-ab5b-3528a179c743","inputs":{"logInput":{"id":"d0458651-91d2-42de-bc50-6eee5bab3c45","value":{"address":"/addr1","args":0.777},"type":"ANY","fixed":false,"published":false,"editor":false,"continuous":true}},"outputs":{"passthruOutput":{"id":"e7fd3849-5c15-4b9c-b4fb-1d4973d2cb69","value":{"address":"/addr1","args":0.777},"type":"ANY","editor":false,"fixed":false}},"nodeName":""},"5a0abe29-5aee-40f5-9b3f-66c660deca29":{"nodetype":"UDPTransceiver","descr":"Receives and sends UDP datagrams","x":800,"y":200,"id":"5a0abe29-5aee-40f5-9b3f-66c660deca29","inputs":{"bufIn":{"id":"41b297d9-434c-4c7f-abcc-98a6cbf8b65c","value":{"type":"Buffer","data":[47,97,100,100,114,49,0,0,44,102,0,0,63,70,233,121]},"type":"BUF","fixed":false,"published":false,"editor":false,"continuous":true},"oscIn":{"id":"9503708e-026d-4591-8c01-08dff59d8735","value":{},"type":"OBJECT","fixed":false,"published":false,"editor":false,"continuous":true},"multiSend":{"id":"2eedbd30-4910-4fc6-adff-5bca6db2b3f0","value":0,"type":"MUX","fixed":false,"published":false,"editor":false},"sendHost":{"id":"86d97ed3-7bdf-4964-8487-a577ebd8b1f7","value":"127.0.0.1","type":"STRING","fixed":false,"published":false,"editor":false},"sendPort":{"id":"901ce382-6b9a-4ab5-80f2-5201e9915ba0","value":4663,"type":"INT","fixed":false,"published":false,"editor":false},"listenPort":{"id":"53465e9d-3b6f-4405-bb73-17864cb614f5","value":9001,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"bufOut":{"id":"d892de87-7d8b-49fe-916d-1a18e6747fec","value":0,"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"f673e985-4b14-494c-b018-e1314ef20d2d","value":null,"type":"OBJECT","editor":false,"fixed":false},"pktTime":{"id":"45013bcb-d4b6-4335-950d-2ce87814f57c","value":0,"type":"FLOAT","editor":false,"fixed":false}},"nodeName":""},"c25851ab-91f6-4284-8d18-339ddada3d76":{"nodetype":"OSCMessage-custom","x":560,"y":240,"id":"c25851ab-91f6-4284-8d18-339ddada3d76","inputs":{"bufIn":{"id":"d7dd30d2-ff98-442b-8dc8-dc57e6a52014","type":"BUF","fixed":false,"published":false,"editor":false},"_addr1":{"id":"d43b711d-bc4c-46e4-9ef4-f1f8c95c2d5b","value":0.777,"type":"ANY","fixed":false,"published":false,"editor":false,"continuous":true}},"outputs":{"bufOut":{"id":"8e9bf983-b6eb-4e8d-87a4-c0491cf6069d","value":{"type":"Buffer","data":[47,97,100,100,114,49,0,0,44,102,0,0,63,70,233,121]},"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"2702d718-0b12-4453-b790-cf6143eab69c","value":{"address":"/addr1","args":0.777},"type":"OBJECT","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports, state, id, triggerPort) {\n    //called on new input\n    var msg;\n    if (triggerPort.name === \"bufIn\") {\n      msg = osc.fromBuffer(ports.bufIn.get());\n      if (msg) {\n        var translated = msg.address.replace(/\\//g,'_');\n        if (ports.hasOwnProperty(translated)) {\n          ports[translated].set(msg.args);\n        }\n      }\n    } else {\n      var ip = triggerPort.get();\n      var values;\n      // Is the intention here to be able to send an array (or object) of arguments? If so, and this works, we don't need OSCArrayMessage.\n      if (ip != null && typeof ip == 'object') {\n        values = [];\n        for (var k in ip) {\n          values.push(ip[k]);\n        }\n      }\n      msg = {\n        address: \"\" + triggerPort.name.replace(/_/g, '/'),\n        args: (values) ? values : ip\n      };\n      ports.bufOut.set(osc.toBuffer(msg));\n      ports.oscOut.set(msg);\n    }\n  }"},"df15c286-8b03-40db-bc41-867d45e43d58":{"nodetype":"KeyCodeToNumValue-custom","x":280,"y":240,"id":"df15c286-8b03-40db-bc41-867d45e43d58","inputs":{"keyCode":{"id":"ca8a81b4-83e2-477f-a089-08cfdfb1bb1a","value":55,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"numValue":{"id":"8b19471b-6160-43a2-bc10-e3949e032a15","value":0.777,"type":"NUM","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports) {\n      // ========\n      // Map characters to numbers (using characters here for readability)\n      // TODO: Put this somewhere else e.g. initfn?\n\n      // ----\n      // USERS: CHANGE THIS MAPPING HERE\n      // In this default example we're mapping to MIDI note pitches,\n      // much like you'd see in a \"musical typing\" feature in a DAW\n      var keyCharMappings = {\n        \"0\": 0,\n        \"1\": 0.111,\n        \"2\": 0.222,\n        \"3\": 0.333,\n        \"4\": 0.444,\n        \"5\": 0.555,\n        \"6\": 0.666,\n        \"7\": 0.777,\n        \"8\": 0.888,\n        \"9\": 1\n      };\n      // ----\n\n      // TODO: More examples.\n\n\n      // ========\n      // Set default value\n      var outputValue = -1;\n\n      // ========\n      // Get key code from input\n      var inputKeyCode = ports.keyCode.get();\n      console.log(\"inputKeyCode = \" + inputKeyCode);\n      // for (var input in this.inputs) {\n      //   product *= ports[input].get();\n      // }\n\n      // ========\n      // Convert mapping to use key codes\n      // TODO: Use a library or something for this; currently uses a lookup object from this gist https://gist.github.com/codingcarpenter/a4faf6a804123bb3a5ea\n      var keyCharsToKeyCodes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,leftarrow:37,uparrow:38,rightarrow:39,downarrow:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};\n      var keyCodeMappings = {};\n\n      for (var keyChar in keyCharMappings) {\n        // keyCodeMappings[keyChar.charCodeAt(0)] = keyCharMappings[keyChar];\n        if (keyCharsToKeyCodes.hasOwnProperty(keyChar)) {\n          keyCode = keyCharsToKeyCodes[keyChar];\n          keyCodeMappings[keyCode] = keyCharMappings[keyChar];\n        }\n      };\n\n\n      // =========\n      // Set & send value for input key code, if found\n      if (keyCodeMappings.hasOwnProperty(inputKeyCode)) {\n        outputValue = keyCodeMappings[inputKeyCode];\n        console.log(\"outputValue = \" + outputValue);\n\n        ports.numValue.set(outputValue);\n      }\n      else {\n        // console.log(\"keyCode \" + inputKeyCode + \" was not found in \");\n        // console.log(keyCodeMappings);\n      }\n\n    }"}},"connections":{"e01c1b56-dfd2-4137-9d65-468c368fc573":{"o":"8e9bf983-b6eb-4e8d-87a4-c0491cf6069d","i":"41b297d9-434c-4c7f-abcc-98a6cbf8b65c"},"2875d14c-6e5e-49fd-90d1-e9306fb1923f":{"o":"2702d718-0b12-4453-b790-cf6143eab69c","i":"d0458651-91d2-42de-bc50-6eee5bab3c45"},"ff5d4c62-18d3-4372-ad95-f69831aac966":{"o":"002617c0-1f22-4672-9fe1-619f57d2b484","i":"ca8a81b4-83e2-477f-a089-08cfdfb1bb1a"},"9982dde5-cab3-4f31-964f-aae37764e501":{"o":"8b19471b-6160-43a2-bc10-e3949e032a15","i":"d43b711d-bc4c-46e4-9ef4-f1f8c95c2d5b"}},"inputs":{},"outputs":{},"nodetype":"ContainerMapNode","nodeName":"","descr":"A container for a sub mapping.","x":0,"y":0}