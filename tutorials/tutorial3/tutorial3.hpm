{"id":"a2083f9a-10eb-4fe0-841d-8880b39169a7","nodes":{"945300a8-1bca-4910-9e44-fe491d62f7a2":{"nodetype":"KeyboardInput","descr":"Listen to input from computer keyboard.","x":200,"y":200,"id":"945300a8-1bca-4910-9e44-fe491d62f7a2","inputs":{},"outputs":{"keyChar":{"id":"241ac68a-3497-4bac-9dc6-acd3d2a9b8a9","value":"[","type":"STRING","editor":false,"fixed":false},"keyCode":{"id":"93f0b8e6-6696-4776-9cc3-df9d0753b35e","value":91,"type":"INT","editor":false,"fixed":false},"isKeyDown":{"id":"fe2f57cc-ac05-48d1-a65f-f09d14713d7c","value":true,"type":"BOOL","editor":false,"fixed":false}},"nodeName":""},"5276f8f1-68e1-4436-b588-8545538c774d":{"nodetype":"KeyCodeToNumValue-custom","x":400,"y":200,"id":"5276f8f1-68e1-4436-b588-8545538c774d","inputs":{"keyCode":{"id":"c5915e75-24b6-49d9-ae3a-ef9fd6c29fe9","value":91,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"numValue":{"id":"61153c46-b250-43e8-9a53-bb562a226547","value":0,"type":"NUM","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports) {\n      // ========\n      // Map characters to numbers (using characters here for readability)\n      // TODO: Put this somewhere else e.g. initfn?\n\n      // ----\n      // USERS: CHANGE THIS MAPPING HERE\n      // In this default example we're mapping to MIDI note pitches,\n      // much like you'd see in a \"musical typing\" feature in a DAW\n      var keyCharMappings = {\n        \"0\": 0,\n        \"1\": 0.111,\n        \"2\": 0.222,\n        \"3\": 0.333,\n        \"4\": 0.444,\n        \"5\": 0.555,\n        \"6\": 0.666,\n        \"7\": 0.777,\n        \"8\": 0.888,\n        \"9\": 0.999\n      };\n      // ----\n\n      // TODO: More examples.\n\n\n\n      // ========\n      // Set default value\n      var outputValue = -1;\n\n      // ========\n      // Get key code from input\n      var inputKeyCode = ports.keyCode.get();\n      console.log(\"inputKeyCode = \" + inputKeyCode);\n      // for (var input in this.inputs) {\n      //   product *= ports[input].get();\n      // }\n\n\n      // ========\n      // Convert mapping to use key codes\n      // TODO: Use a library or something for this; currently uses a lookup object from this gist https://gist.github.com/codingcarpenter/a4faf6a804123bb3a5ea\n      var keyCharsToKeyCodes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,leftarrow:37,uparrow:38,rightarrow:39,downarrow:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};\n      var keyCodeMappings = {};\n\n      for (var keyChar in keyCharMappings) {\n        // keyCodeMappings[keyChar.charCodeAt(0)] = keyCharMappings[keyChar];\n        if (keyCharsToKeyCodes.hasOwnProperty(keyChar)) {\n          keyCode = keyCharsToKeyCodes[keyChar];\n          keyCodeMappings[keyCode] = keyCharMappings[keyChar];\n        }\n      };\n\n\n      // =========\n      // Set & send value for input key code, if found\n      if (keyCodeMappings.hasOwnProperty(inputKeyCode)) {\n        outputValue = keyCodeMappings[inputKeyCode];\n        console.log(\"outputValue = \" + outputValue);\n\n        ports.numValue.set(outputValue);\n      }\n      else {\n        // console.log(\"keyCode \" + inputKeyCode + \" was not found in \");\n        // console.log(keyCodeMappings);\n      }\n\n    }"},"d614d887-47d8-433a-a5c0-b6b861cab613":{"nodetype":"OSCMessage-custom","x":640,"y":200,"id":"d614d887-47d8-433a-a5c0-b6b861cab613","inputs":{"bufIn":{"id":"70e3e511-d7de-4166-8182-f1392b8ffc49","type":"BUF","fixed":false,"published":false,"editor":false},"_address1":{"id":"9a4bdca1-33e4-4996-ad86-5deb5386a4ae","value":0,"type":"ANY","fixed":false,"published":false,"editor":false,"continuous":true}},"outputs":{"bufOut":{"id":"caef277e-524b-434f-a250-9d34a44b7739","value":{"type":"Buffer","data":[47,97,100,100,114,101,115,115,49,0,0,0,44,102,0,0,0,0,0,0]},"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"a9a8678d-e361-47c2-b09a-2ec91c3a8d9e","value":{"address":"/address1","args":0},"type":"OBJECT","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports, state, id, triggerPort) {\n    //called on new input\n    var msg;\n    if (triggerPort.name === \"bufIn\") {\n      msg = osc.fromBuffer(ports.bufIn.get());\n      if (msg) {\n        var translated = msg.address.replace(/\\//g,'_');\n        if (ports.hasOwnProperty(translated)) {\n          ports[translated].set(msg.args);\n        }\n      }\n    } else {\n      var ip = triggerPort.get();\n      var values;\n      // Is the intention here to be able to send an array (or object) of arguments? If so, and this works, we don't need OSCArrayMessage.\n      if (ip != null && typeof ip == 'object') {\n        values = [];\n        for (var k in ip) {\n          values.push(ip[k]);\n        }\n      }\n      msg = {\n        address: \"\" + triggerPort.name.replace(/_/g, '/'),\n        args: (values) ? values : ip\n      };\n      ports.bufOut.set(osc.toBuffer(msg));\n      ports.oscOut.set(msg);\n    }\n  }"},"2788ebb3-72b2-4139-8e29-24c39c479365":{"nodetype":"UDPTransceiver","descr":"Receives and sends UDP datagrams","x":1017,"y":247,"id":"2788ebb3-72b2-4139-8e29-24c39c479365","inputs":{"bufIn":{"id":"0f642605-e45c-4a86-9fbd-246e86372ded","value":{"type":"Buffer","data":[47,97,100,100,114,101,115,115,49,0,0,0,44,102,0,0,0,0,0,0]},"type":"BUF","fixed":false,"published":false,"editor":false,"continuous":true},"oscIn":{"id":"c5464b29-7999-453d-a1e3-573cfee06fec","value":{},"type":"OBJECT","fixed":false,"published":false,"editor":false,"continuous":true},"multiSend":{"id":"cb98f6b1-8daa-4990-8ada-81741ed0486e","value":0,"type":"MUX","fixed":false,"published":false,"editor":false},"sendHost":{"id":"a072f87c-d4a8-444c-ad38-c9d53b2db734","value":"127.0.0.1","type":"STRING","fixed":false,"published":false,"editor":false},"sendPort":{"id":"ba094e8f-2b1f-4d06-8165-7834eb11f8c3","value":4663,"type":"INT","fixed":false,"published":false,"editor":false},"listenPort":{"id":"3c65015c-7772-4f81-b660-5df8c5ca2afb","value":9001,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"bufOut":{"id":"61442a6e-1e46-4af4-823c-7780d82adf01","value":0,"type":"BUF","editor":false,"fixed":false},"oscOut":{"id":"6ca45a74-d672-4fcf-ada1-0fe1bfe2a1a9","value":null,"type":"OBJECT","editor":false,"fixed":false},"pktTime":{"id":"9ed7ee8e-fe87-41d8-85b6-9c238e741ad7","value":0,"type":"FLOAT","editor":false,"fixed":false}},"nodeName":""}},"connections":{"ec2f0baa-6c19-4ad1-9b27-805972b9a930":{"o":"93f0b8e6-6696-4776-9cc3-df9d0753b35e","i":"c5915e75-24b6-49d9-ae3a-ef9fd6c29fe9"},"067febc4-8119-493a-89fa-30cfb0c44aad":{"o":"61153c46-b250-43e8-9a53-bb562a226547","i":"9a4bdca1-33e4-4996-ad86-5deb5386a4ae"},"597b6a19-570d-480f-ac78-bd2eee5d7cc8":{"o":"caef277e-524b-434f-a250-9d34a44b7739","i":"0f642605-e45c-4a86-9fbd-246e86372ded"}},"inputs":{},"outputs":{},"nodetype":"ContainerMapNode","nodeName":"","descr":"A container for a sub mapping.","x":0,"y":0}