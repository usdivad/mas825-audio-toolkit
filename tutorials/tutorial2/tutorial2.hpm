{"id":"d346d907-31a8-498e-8154-9682df07f9a3","nodes":{"557c8b4f-9cae-44b5-94cd-0ed934f68b08":{"nodetype":"KeyboardInput","descr":"Listen to input from computer keyboard.","x":120,"y":120,"id":"557c8b4f-9cae-44b5-94cd-0ed934f68b08","inputs":{},"outputs":{"keyChar":{"id":"1cbd7615-905d-46ec-ba01-d49123b9dc0b","value":"[","type":"STRING","editor":false,"fixed":false},"keyCode":{"id":"ba73d912-85c2-4bf6-8f10-ab08aab9d134","value":91,"type":"INT","editor":false,"fixed":false},"isKeyDown":{"id":"d5508d3f-350f-4cd8-b0dc-eedaaa4209ea","value":false,"type":"BOOL","editor":false,"fixed":false}},"nodeName":""},"cf097abb-e8b0-4e44-8236-2f2291ca5b94":{"nodetype":"KeyboardInputToMIDINote","descr":"Take keyboard input and map it to MIDI notes, using key code as pitch","x":600,"y":160,"id":"cf097abb-e8b0-4e44-8236-2f2291ca5b94","inputs":{"keyCode":{"id":"3ec33592-c3c7-4011-961d-54a0d6a4f00d","value":72,"type":"INT","fixed":false,"published":false,"editor":false},"isKeyDown":{"id":"bc817916-5be7-4185-8024-db6fec992da4","value":false,"type":"BOOL","fixed":false,"published":false,"editor":false},"channel":{"id":"47768e16-3cda-47db-aae9-e7a6c4bf9fac","value":0,"type":"INT","fixed":false,"published":false,"editor":false},"velocity":{"id":"2b417aed-143c-43fd-a5ad-ac8aefa5a79f","value":64,"type":"INT","fixed":false,"published":false,"editor":true}},"outputs":{"midiNote":{"id":"da6ff842-f5e8-4b4a-8369-1c7665c739a8","value":{"channel":0,"note":72,"velocity":0},"type":"OBJECT","editor":false,"fixed":false}},"nodeName":""},"477b9be3-e472-4101-bff0-c1e41be750fb":{"nodetype":"MIDIDeviceOut","descr":"Sends a MIDI note","x":840,"y":160,"id":"477b9be3-e472-4101-bff0-c1e41be750fb","inputs":{"midiNote":{"id":"1ca378c3-7e16-406d-b737-69dbcd4e191b","value":{"channel":0,"note":72,"velocity":0},"type":"OBJECT","fixed":false,"published":false,"editor":false},"port":{"id":"5307c0ee-9d65-45a0-9392-4bb260efb245","value":0,"type":"INT","fixed":false,"published":false,"editor":false},"channel":{"id":"4caa3336-18c1-45f7-8d7a-3f95661974ae","value":0,"type":"INT","fixed":false,"published":false,"editor":false},"pitch":{"id":"7d9c485b-b768-4c06-ad0a-4410208ffbf3","value":60,"type":"INT","fixed":false,"published":false,"editor":false,"continuous":true},"velocity":{"id":"8f82aec6-1b27-4a28-a239-335be65ce65b","value":0.8,"type":"FLOAT","fixed":false,"published":false,"editor":false},"duration":{"id":"1fb5c2e1-85ce-4867-9aba-091c777bdd90","value":0.6,"type":"FLOAT","fixed":false,"published":false,"editor":false}},"outputs":{},"nodeName":""},"85f69203-d107-4cc5-8a11-991a6fe30f18":{"nodetype":"KeyCodeToNumValue-custom","x":360,"y":80,"id":"85f69203-d107-4cc5-8a11-991a6fe30f18","inputs":{"keyCode":{"id":"5534a637-b9b2-4907-bd51-2235ec6dc730","value":91,"type":"INT","fixed":false,"published":false,"editor":false}},"outputs":{"numValue":{"id":"52bc2e12-0029-4ae6-aebf-d90a3e7bd671","value":72,"type":"NUM","editor":false,"fixed":false}},"nodeName":"","procfnStr":"function (ports) {\n      // ========\n      // Map characters to numbers (using characters here for readability)\n      // TODO: Put this somewhere else e.g. initfn?\n\n      // ----\n      // USERS: CHANGE THIS MAPPING HERE\n      // In this default example we're mapping to MIDI note pitches,\n      // much like you'd see in a \"musical typing\" feature in a DAW\n      var keyCharMappings = {\n        \"a\": 72,\n        \"w\": 61,\n        \"s\": 62,\n        \"e\": 63,\n        \"d\": 64,\n        \"f\": 65,\n        \"t\": 66,\n        \"g\": 67,\n        \"y\": 68,\n        \"h\": 69,\n        \"u\": 70,\n        \"j\": 71,\n        \"k\": 72,\n        \"o\": 73,\n        \"l\": 74,\n        \"p\": 75,\n        \";\": 76,\n        \"'\": 77\n      };\n      // ----\n\n      // TODO: More examples.\n\n\n\n      // ========\n      // Set default value\n      var outputValue = -1;\n\n      // ========\n      // Get key code from input\n      var inputKeyCode = ports.keyCode.get();\n      console.log(\"inputKeyCode = \" + inputKeyCode);\n      // for (var input in this.inputs) {\n      //   product *= ports[input].get();\n      // }\n\n\n      // ========\n      // Convert mapping to use key codes\n      // TODO: Use a library or something for this; currently uses a lookup object from this gist https://gist.github.com/codingcarpenter/a4faf6a804123bb3a5ea\n      var keyCharsToKeyCodes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,leftarrow:37,uparrow:38,rightarrow:39,downarrow:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};\n      var keyCodeMappings = {};\n\n      for (var keyChar in keyCharMappings) {\n        // keyCodeMappings[keyChar.charCodeAt(0)] = keyCharMappings[keyChar];\n        if (keyCharsToKeyCodes.hasOwnProperty(keyChar)) {\n          keyCode = keyCharsToKeyCodes[keyChar];\n          keyCodeMappings[keyCode] = keyCharMappings[keyChar];\n        }\n      };\n\n\n      // =========\n      // Set & send value for input key code, if found\n      if (keyCodeMappings.hasOwnProperty(inputKeyCode)) {\n        outputValue = keyCodeMappings[inputKeyCode];\n        console.log(\"outputValue = \" + outputValue);\n\n        ports.numValue.set(outputValue);\n      }\n      else {\n        // console.log(\"keyCode \" + inputKeyCode + \" was not found in \");\n        // console.log(keyCodeMappings);\n      }\n\n    }"}},"connections":{"a3401e61-410f-418f-8e55-696f52219852":{"o":"d5508d3f-350f-4cd8-b0dc-eedaaa4209ea","i":"bc817916-5be7-4185-8024-db6fec992da4"},"8bf61ceb-7936-4f70-b15e-5c72d7390f9a":{"o":"da6ff842-f5e8-4b4a-8369-1c7665c739a8","i":"1ca378c3-7e16-406d-b737-69dbcd4e191b"},"1e572230-6131-4178-97c0-9f50e8539c3f":{"o":"ba73d912-85c2-4bf6-8f10-ab08aab9d134","i":"5534a637-b9b2-4907-bd51-2235ec6dc730"},"7e31cd4a-d58f-4152-a6b2-8be843b9fb85":{"o":"52bc2e12-0029-4ae6-aebf-d90a3e7bd671","i":"3ec33592-c3c7-4011-961d-54a0d6a4f00d"}},"inputs":{},"outputs":{},"nodetype":"ContainerMapNode","nodeName":"","descr":"A container for a sub mapping.","x":0,"y":0}